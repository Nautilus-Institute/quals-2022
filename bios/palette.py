import sys, os
from PIL import Image


Values = [0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0x00, 0x00, 0x08, 0x00,
  0x00, 0x08, 0x00, 0x00, 0x09, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x0a, 0x04, 0x00, 0x09, 0x06, 0x00,
  0x09, 0x08, 0x00, 0x08, 0x0a, 0x00, 0x07, 0x0c, 0x00, 0x07, 0x0e, 0x00, 0x06, 0x10, 0x00, 0x05,
  0x12, 0x00, 0x05, 0x14, 0x00, 0x04, 0x16, 0x00, 0x04, 0x18, 0x00, 0x03, 0x1a, 0x00, 0x02, 0x1c,
  0x00, 0x02, 0x1e, 0x00, 0x01, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x21, 0x00, 0x00, 0x22, 0x00,
  0x00, 0x23, 0x00, 0x00, 0x24, 0x00, 0x00, 0x24, 0x00, 0x00, 0x25, 0x00, 0x00, 0x26, 0x00, 0x00,
  0x27, 0x00, 0x00, 0x28, 0x00, 0x00, 0x28, 0x00, 0x00, 0x29, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x2b,
  0x00, 0x00, 0x2c, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x2e, 0x01, 0x00, 0x2f, 0x01, 0x00, 0x30, 0x02,
  0x00, 0x31, 0x02, 0x00, 0x32, 0x03, 0x00, 0x33, 0x03, 0x00, 0x34, 0x04, 0x00, 0x35, 0x04, 0x00,
  0x36, 0x05, 0x00, 0x37, 0x05, 0x00, 0x38, 0x06, 0x00, 0x39, 0x06, 0x00, 0x3a, 0x07, 0x00, 0x3b,
  0x07, 0x00, 0x3c, 0x08, 0x00, 0x3d, 0x08, 0x00, 0x3f, 0x09, 0x00, 0x3f, 0x09, 0x00, 0x3f, 0x0a,
  0x00, 0x3f, 0x0a, 0x00, 0x3f, 0x0b, 0x00, 0x3f, 0x0b, 0x00, 0x3f, 0x0c, 0x00, 0x3f, 0x0c, 0x00,
  0x3f, 0x0d, 0x00, 0x3f, 0x0d, 0x00, 0x3f, 0x0e, 0x00, 0x3f, 0x0e, 0x00, 0x3f, 0x0f, 0x00, 0x3f,
  0x0f, 0x00, 0x3f, 0x10, 0x00, 0x3f, 0x10, 0x00, 0x3f, 0x11, 0x00, 0x3f, 0x11, 0x00, 0x3f, 0x12,
  0x00, 0x3f, 0x12, 0x00, 0x3f, 0x13, 0x00, 0x3f, 0x13, 0x00, 0x3f, 0x14, 0x00, 0x3f, 0x14, 0x00,
  0x3f, 0x15, 0x00, 0x3f, 0x15, 0x00, 0x3f, 0x16, 0x00, 0x3f, 0x16, 0x00, 0x3f, 0x17, 0x00, 0x3f,
  0x18, 0x00, 0x3f, 0x18, 0x00, 0x3f, 0x19, 0x00, 0x3f, 0x19, 0x00, 0x3f, 0x1a, 0x00, 0x3f, 0x1a,
  0x00, 0x3f, 0x1b, 0x00, 0x3f, 0x1b, 0x00, 0x3f, 0x1c, 0x00, 0x3f, 0x1c, 0x00, 0x3f, 0x1d, 0x00,
  0x3f, 0x1d, 0x00, 0x3f, 0x1e, 0x00, 0x3f, 0x1e, 0x00, 0x3f, 0x1f, 0x00, 0x3f, 0x1f, 0x00, 0x3f,
  0x20, 0x00, 0x3f, 0x20, 0x00, 0x3f, 0x21, 0x00, 0x3f, 0x21, 0x00, 0x3f, 0x22, 0x00, 0x3f, 0x22,
  0x00, 0x3f, 0x23, 0x00, 0x3f, 0x23, 0x00, 0x3f, 0x24, 0x00, 0x3f, 0x24, 0x00, 0x3f, 0x25, 0x00,
  0x3f, 0x26, 0x00, 0x3f, 0x26, 0x00, 0x3f, 0x27, 0x00, 0x3f, 0x27, 0x00, 0x3f, 0x28, 0x00, 0x3f,
  0x28, 0x00, 0x3f, 0x29, 0x00, 0x3f, 0x29, 0x00, 0x3f, 0x2a, 0x00, 0x3f, 0x2a, 0x00, 0x3f, 0x2b,
  0x00, 0x3f, 0x2b, 0x00, 0x3f, 0x2c, 0x00, 0x3f, 0x2c, 0x00, 0x3f, 0x2d, 0x00, 0x3f, 0x2d, 0x00,
  0x3f, 0x2e, 0x00, 0x3f, 0x2e, 0x00, 0x3f, 0x2f, 0x00, 0x3f, 0x2f, 0x00, 0x3f, 0x30, 0x00, 0x3f,
  0x30, 0x00, 0x3f, 0x31, 0x00, 0x3f, 0x31, 0x00, 0x3f, 0x32, 0x00, 0x3f, 0x32, 0x00, 0x3f, 0x33,
  0x00, 0x3f, 0x34, 0x00, 0x3f, 0x34, 0x00, 0x3f, 0x34, 0x00, 0x3f, 0x34, 0x00, 0x3f, 0x34, 0x00,
  0x3f, 0x35, 0x00, 0x3f, 0x35, 0x00, 0x3f, 0x35, 0x00, 0x3f, 0x35, 0x00, 0x3f, 0x36, 0x00, 0x3f,
  0x36, 0x00, 0x3f, 0x36, 0x00, 0x3f, 0x36, 0x00, 0x3f, 0x36, 0x00, 0x3f, 0x37, 0x00, 0x3f, 0x37,
  0x00, 0x3f, 0x37, 0x00, 0x3f, 0x37, 0x00, 0x3f, 0x38, 0x00, 0x3f, 0x38, 0x00, 0x3f, 0x38, 0x00,
  0x3f, 0x38, 0x00, 0x3f, 0x39, 0x00, 0x3f, 0x39, 0x00, 0x3f, 0x39, 0x00, 0x3f, 0x39, 0x00, 0x3f,
  0x39, 0x00, 0x3f, 0x3a, 0x00, 0x3f, 0x3a, 0x00, 0x3f, 0x3a, 0x00, 0x3f, 0x3a, 0x00, 0x3f, 0x3b,
  0x00, 0x3f, 0x3b, 0x00, 0x3f, 0x3b, 0x00, 0x3f, 0x3b, 0x00, 0x3f, 0x3c, 0x00, 0x3f, 0x3c, 0x00,
  0x3f, 0x3c, 0x00, 0x3f, 0x3c, 0x00, 0x3f, 0x3c, 0x00, 0x3f, 0x3d, 0x00, 0x3f, 0x3d, 0x00, 0x3f,
  0x3d, 0x00, 0x3f, 0x3d, 0x00, 0x3f, 0x3e, 0x00, 0x3f, 0x3e, 0x00, 0x3f, 0x3e, 0x00, 0x3f, 0x3e,
  0x00, 0x3f, 0x3f, 0x00, 0x3f, 0x3f, 0x01, 0x3f, 0x3f, 0x02, 0x3f, 0x3f, 0x03, 0x3f, 0x3f, 0x04,
  0x3f, 0x3f, 0x05, 0x3f, 0x3f, 0x06, 0x3f, 0x3f, 0x07, 0x3f, 0x3f, 0x08, 0x3f, 0x3f, 0x09, 0x3f,
  0x3f, 0x0a, 0x3f, 0x3f, 0x0a, 0x3f, 0x3f, 0x0b, 0x3f, 0x3f, 0x0c, 0x3f, 0x3f, 0x0d, 0x3f, 0x3f,
  0x0e, 0x3f, 0x3f, 0x0f, 0x3f, 0x3f, 0x10, 0x3f, 0x3f, 0x11, 0x3f, 0x3f, 0x12, 0x3f, 0x3f, 0x13,
  0x3f, 0x3f, 0x14, 0x3f, 0x3f, 0x15, 0x3f, 0x3f, 0x15, 0x3f, 0x3f, 0x16, 0x3f, 0x3f, 0x17, 0x3f,
  0x3f, 0x18, 0x3f, 0x3f, 0x19, 0x3f, 0x3f, 0x1a, 0x3f, 0x3f, 0x1b, 0x3f, 0x3f, 0x1c, 0x3f, 0x3f,
  0x1d, 0x3f, 0x3f, 0x1e, 0x3f, 0x3f, 0x1f, 0x3f, 0x3f, 0x1f, 0x3f, 0x3f, 0x20, 0x3f, 0x3f, 0x21,
  0x3f, 0x3f, 0x22, 0x3f, 0x3f, 0x23, 0x3f, 0x3f, 0x24, 0x3f, 0x3f, 0x25, 0x3f, 0x3f, 0x26, 0x3f,
  0x3f, 0x27, 0x3f, 0x3f, 0x28, 0x3f, 0x3f, 0x29, 0x3f, 0x3f, 0x2a, 0x3f, 0x3f, 0x2a, 0x3f, 0x3f,
  0x2b, 0x3f, 0x3f, 0x2c, 0x3f, 0x3f, 0x2d, 0x3f, 0x3f, 0x2e, 0x3f, 0x3f, 0x2f, 0x3f, 0x3f, 0x30,
  0x3f, 0x3f, 0x31, 0x3f, 0x3f, 0x32, 0x3f, 0x3f, 0x33, 0x3f, 0x3f, 0x34, 0x3f, 0x3f, 0x34, 0x3f,
  0x3f, 0x35, 0x3f, 0x3f, 0x36, 0x3f, 0x3f, 0x37, 0x3f, 0x3f, 0x38, 0x3f, 0x3f, 0x39, 0x3f, 0x3f,
  0x3a, 0x3f, 0x3f, 0x3b, 0x3f, 0x3f, 0x3c, 0x3f, 0x3f, 0x3d, 0x3f, 0x3f, 0x3e, 0x3f, 0x3f, 0x3f]
for i in range(0, len(Values)):
  Values[i] = Values[i] << 2

def GenerateValues():
  BlueCountIncrease = 4
  BlueCountDecrease = 12
  BlueMaxValue = 0x48
  BlueStartValue = 0x20
  RedCountBeforeYellow = 20
  RedMaxBeforeYellow = 0x84
  NumValsForWhite = 82
  NumValsFullBright = 20
  RedPercentOfEnd = 0.2

  Values = []
  Values += [0, 0, 0]

  B = BlueStartValue
  BlueIncVal = (BlueMaxValue - B) / BlueCountIncrease
  for i in range(0, BlueCountIncrease):
    B += BlueIncVal
    Values += [0, 0, int(B)]

  RedIncVal = RedMaxBeforeYellow / RedCountBeforeYellow
  BlueDecVal = BlueMaxValue / BlueCountDecrease
  R = 0
  for i in range(0, BlueCountDecrease):
    R += RedIncVal
    Values += [int(R), 0, int(BlueDecVal*(BlueCountDecrease-i))]

  for i in range(int(len(Values) / 3), RedCountBeforeYellow):
    R += RedIncVal
    Values += [int(R), 0, 0]

  ValuesLeft = 256 - RedCountBeforeYellow
  ValuesLeft -= NumValsForWhite

  RedValuesLeft = int(ValuesLeft * RedPercentOfEnd)
  YellowValuesLeft = ValuesLeft

  RedIncVal = (256 - R) / RedValuesLeft
  YellowIncVal = 256 / YellowValuesLeft
  WhiteIncVal = 256 / (NumValsForWhite - (NumValsFullBright - 1))

  counter = [0,0,0]
  G = 0
  B = 0
  while len(Values) < 256*3:
    R += RedIncVal
    G += YellowIncVal
    if R >= 255:
      R = 255
    else:
      counter[0] += 1
    if G >= 255:
      G = 255
      B += WhiteIncVal
      counter[2] += 1
      if B >= 255:
        B = 255
    else:
      counter[1] += 1

    Values += [int(R), int(G), int(B)]
  return Values

def GenerateImage(Values):
  SIZE = 50
  img = Image.new("RGB", (16*SIZE, 16*SIZE))

  linedata = ""
  for i in range(0, len(Values)):
    if i and (i % 3) == 0:
      #print(linedata)
      linedata = str(i / 3) + ": "
    linedata += "0x%02x, " % (Values[i])

  CurX = 0
  CurY = 0
  for i in range(0, 256):
    CurColor = tuple(Values[i*3:(i*3)+3])

    for x in range(0, SIZE):
      for y in range(0, SIZE):
        img.putpixel((CurX+x, CurY+y), CurColor)

    CurX += SIZE
    if CurX >= 16*SIZE:
      CurX = 0
      CurY += SIZE

  img.show()

Values = GenerateValues()
#GenerateImage(Values)
data = b""
for entry in Values:
  data += bytes([entry])
f = open("fire.pal", "wb")
f.write(data)
f.close()
